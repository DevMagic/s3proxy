name: Node CI
on: [push]
jobs:
  audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: security audit, fail for critical findings
        run: |
          npm audit --audit-level critical
  build:
    runs-on: ubuntu-latest
    needs: audit
    strategy:
      matrix:
        node-version: [14, 16]
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: install
        run: |
          npm install
      - name: lint
        run: |
          npm run eslint
      - name: unit tests (mocha)
        run: |
          npm run nyc-coverage mocha
      - name: test sam-app
        run: |
          cd examples/sam-app
          sam build
          sam local invoke -e events/event.json
          cd s3proxy
          npm install
          npm run build --if-present
          npm test
  functional-tests:
    runs-on: ubuntu-latest
    env:
      # https://docs.docker.com/engine/security/trust/trust_automation/
      DOCKER_CONTENT_TRUST: 0
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16
      - name: install
        run: |
          npm install
      - name: artillery
        run: |
          npm run artillery-ci
      - name: package module into tarball
        run: | 
          npm run package
      - name: test package via docker
        run: |
          npm run artillery-docker
      - name: Scan image for security issues
        uses: Azure/container-scan@v0
        env:
          # Skip `won't fix` CVEs
          # See https://github.com/Azure/container-scan/issues/61
          TRIVY_IGNORE_UNFIXED: true
        with:
          image-name: s3proxy:test
          severity-threshold: HIGH
          run-quality-checks: true
      - name: scan container
        run: |
          # docker scan s3proxy:test
  dockerize:
    runs-on: ubuntu-latest
    needs: functional-tests
    env:
      DOCKER_CONTENT_TRUST: 0
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16
      - name: docker build and push to aws
        env:
          AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
        run: |
          npm run package
          npm run docker-login-aws
          npm run dockerize-for-prod-aws
      - name: docker build and push to dockerhub
        env:
          DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
          DOCKERHUB_ACCESS_TOKEN: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
        run: |
          npm run docker-login-dockerhub
          npm run dockerize-for-prod-dockerhub

